name: CPP Azure FunctionApp Deployment
trigger: none
pr:
- main

parameters:
- name: environment
  displayName: Environment and Terraform Workspace
  type: string
  default: dev
  values:
  - dev
  - sit
  - nft
  - prp
  - prx
  - prd
- name: application
  displayName: The name of the application
  default: notifyatt
- name: spnCredentialsVarGroup
  default: "terratest-app-registration"
- name: azureServiceConnection
  default: "HMCTS Non-Live"
- name: tfversion
  default: 1.2.8
- name: agentPool
  default: "ubuntu-latest"
- name: storageName
  default: "samdvshared01"

resources:
  repositories:
  - repository: cppAzureDevOpsTemplates
    type: github
    name: hmcts/cpp-azure-devops-templates
    endpoint: 'cpp-apps'

stages:
  - stage: precommit
    jobs:
    - job: precommit_checks
      pool:
        vmImage: ${{ parameters.agentPool }}
      steps:
        - task: TerraformInstaller@0
          displayName: Terraform install
          inputs:
            terraformVersion: ${{ parameters.tfversion }}
        - task: CmdLine@2
          displayName: 'Run pre-commit static analysis'
          inputs:
            targetType: 'inline'
            script: |
              curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
              python3 -m pip install --upgrade pip
              pip3 install pre-commit
              pre-commit run --all-files --show-diff-on-failure

  - stage: terraform_plan
    dependsOn:
      - precommit
    condition: succeeded('precommit')
    jobs:
    - job: terraform_plan
      pool:
        vmImage: ${{ parameters.agentPool }}
      steps:
        - task: TerraformTaskV3@3
          displayName: Terraform Init
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            commandOptions: '-lock=false' # don't lock on PRs / validate phase
            backendType: 'azurerm'
            backendServiceArm: ${{ parameters.azureServiceConnection }}
            backendAzureRmResourceGroupName: 'RG-MDV-SHARED-01'
            backendAzureRmResourceGroupLocation: 'uksouth'
            backendAzureRmStorageAccountName: '${{ parameters.storageName }}'
            backendAzureRmStorageAccountSku: Standard_LRS
            backendAzureRmContainerName: 'automation-terraform-functionapp'
            backendAzureRmKey: '${{ parameters.environment }}/terraform-${{ parameters.environment }}.tfstate'

        - task: TerraformTaskV3@3
          displayName: Terraform Plan
          inputs:
            command: 'plan'
            environmentServiceNameAzureRM: ${{ parameters.azureServiceConnection }}
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            commandOptions: '-var-file=$(System.DefaultWorkingDirectory)/vars/${{ parameters.environment }}/${{ parameters.application }}.tfvars -out=$(System.DefaultWorkingDirectory)/tfplan-${{ parameters.application }}.out'
            publishPlanResults: $(System.StageDisplayName)

        - task: ArchiveFiles@2
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Plan Artifact'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'

  - stage: terraform_apply
    dependsOn:
      - terraform_plan
    condition: and(succeeded('terraform_plan'), ne(variables['Build.Reason'], 'PullRequest')
    jobs:
    - job: terraform_apply
      pool:
        vmImage: ${{ parameters.agentPool }}
      steps:
      - task: DownloadBuildArtifacts@1
        displayName: 'Download Plan Artifact'
        inputs:
          artifactName: 'drop'
          downloadPath: '$(Build.ArtifactStagingDirectory)'

      - task: ExtractFiles@1
        displayName: 'Extract Plan Artifact'
        inputs:
          archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/drop/$(Build.BuildId).zip'
          destinationFolder: '$(System.DefaultWorkingDirectory)/drop/'
          cleanTargetFolder: false

      - task: TerraformTaskV3@3
        displayName: Terraform Apply
        inputs:
          command: 'apply'
          environmentServiceNameAzureRM: ${{ parameters.azureServiceConnection }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/drop/'
          commandOptions: '-auto-approve tfplan-${{ parameters.application }}.out'
